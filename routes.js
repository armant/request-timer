// Generated by CoffeeScript 1.9.3
var NUM_OF_LAST_DURATIONS, NUM_OF_REQUESTS, REQUEST_TYPES, TIMEOUT, asyncLib, medianLib, requestLib, runChecks, urlLib, urlencodedParserLib, validUrlLib;

NUM_OF_REQUESTS = 5;

NUM_OF_LAST_DURATIONS = 7;

REQUEST_TYPES = {
  'GET': true,
  'POST': true
};

TIMEOUT = 10000;

asyncLib = require('async');

medianLib = require('median');

requestLib = require('request');

urlencodedParserLib = require('body-parser').urlencoded({
  extended: false
});

urlLib = require('url');

validUrlLib = require('valid-url');

module.exports = function(app) {
  app.get('/', function(req, res) {
    var collection, db;
    db = req.db;
    collection = db.get('alldurations');
    return collection.find({}, {}, function(e, durations) {
      var context;
      context = {
        'durations': durations,
        'NUM_OF_LAST_DURATIONS': NUM_OF_LAST_DURATIONS
      };
      return res.render('index.ejs', context);
    });
  });
  app.post('/add', urlencodedParserLib, function(req, res) {
    var collection, db;
    if (!validUrlLib.isUri(req.body.url)) {
      res.status(500).send('newURLErrorURL');
      return;
    }
    if (!REQUEST_TYPES[req.body.type]) {
      res.status(500).send('newURLErrorType');
      return;
    }
    db = req.db;
    collection = db.get('alldurations');
    return collection.findOne({
      url: req.body.url
    }, function(error, result) {
      var urlEntry;
      if (error) {
        res.status(500).send('newURLErrorSave');
        return;
      }
      if (result) {
        res.status(500).send('newURLErrorDuplicate');
        return;
      }
      urlEntry = {
        url: req.body.url,
        type: req.body.type,
        durations: []
      };
      return collection.insert(urlEntry, function(error, result) {
        if (error) {
          res.status(500).send('newURLErrorSave');
          return;
        }
        return res.sendStatus(200);
      });
    });
  });
  return app.get('/run', function(req, res) {
    var db;
    console.log('run');
    runChecks(req.db);
    res.sendStatus(200);
    return db = req.db;
  });
};

runChecks = function(db) {
  var collection;
  collection = db.get('alldurations');
  return collection.find({}, {}, function(e, durations) {
    var requestDurations;
    requestDurations = [];
    return asyncLib.series(durations.map(function(duration) {
      return function(callbackOuter) {
        var data, i, j, options, requestQueue, requestType, results1, results2, url, url_parts;
        url = duration['url'];
        options = {
          uri: url,
          time: true,
          timeout: TIMEOUT
        };
        requestType = duration['type'];
        requestQueue = [];
        if (requestType === 'GET') {
          return asyncLib.series((function() {
            results1 = [];
            for (var i = 1; 1 <= NUM_OF_REQUESTS ? i <= NUM_OF_REQUESTS : i >= NUM_OF_REQUESTS; 1 <= NUM_OF_REQUESTS ? i++ : i--){ results1.push(i); }
            return results1;
          }).apply(this).map(function(_) {
            return function(callbackInner) {
              return requestLib(options, function(error, response, body) {
                var median;
                if (error) {
                  requestDurations.push(null);
                } else {
                  requestDurations.push(response.elapsedTime);
                }
                console.log(options['uri']);
                console.log(requestDurations);
                if (requestDurations.length === NUM_OF_REQUESTS) {
                  median = medianLib(requestDurations);
                  requestDurations = [];
                  console.log(median);
                }
                return callbackInner(null);
              });
            };
          }), function(err, results) {
            return callbackOuter(null);
          });
        } else if (requestType === 'POST') {
          url_parts = urlLib.parse(url, true);
          data = url_parts.query;
          return asyncLib.series((function() {
            results2 = [];
            for (var j = 1; 1 <= NUM_OF_REQUESTS ? j <= NUM_OF_REQUESTS : j >= NUM_OF_REQUESTS; 1 <= NUM_OF_REQUESTS ? j++ : j--){ results2.push(j); }
            return results2;
          }).apply(this).map(function(_) {
            return function(callbackInner) {
              return requestLib.post(options, data, callbackRequest);
            };
          }), function(err, results) {
            return callbackOuter(null);
          });
        }
      };
    }));
  });
};
