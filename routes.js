// Generated by CoffeeScript 1.9.3
var ALERT_MULTIPLE, MAX_VALUE, NUM_OF_LAST_RUNS, NUM_OF_REQUESTS, REQUEST_TYPES, TIMEOUT, addDuration, asyncLib, executeRequests, findMedianRecord, requestLib, runChecks, urlLib, urlencodedParserLib, validUrlLib;

ALERT_MULTIPLE = 2;

MAX_VALUE = 100000;

NUM_OF_LAST_RUNS = 7;

NUM_OF_REQUESTS = 5;

REQUEST_TYPES = {
  'GET': true,
  'POST': true
};

TIMEOUT = 10000;

asyncLib = require('async');

requestLib = require('request');

urlencodedParserLib = require('body-parser').urlencoded({
  extended: false
});

urlLib = require('url');

validUrlLib = require('valid-url');

module.exports = function(app) {
  app.get('/data-by-url', function(req, res) {
    var allDurations, db;
    db = req.db;
    allDurations = db.get('alldurations');
    return allDurations.find({}, {}, function(e, durations) {
      var context;
      context = {
        'durations': durations,
        'NUM_OF_LAST_RUNS': NUM_OF_LAST_RUNS
      };
      return res.render('by-url.ejs', context);
    });
  });
  app.get('/data-by-timestamp', function(req, res) {
    var byTimestamp, db;
    db = req.db;
    byTimestamp = db.get('dataByTimestamp');
    return byTimestamp.find({}, {}, function(e, dataByTimestamp) {
      var context;
      context = {
        'dataByTimestamp': dataByTimestamp
      };
      return res.render('by-timestamp.ejs', context);
    });
  });
  app.post('/add', urlencodedParserLib, function(req, res) {
    var allDurations, data, db, type, url;
    url = req.body.url;
    type = req.body.type;
    data = req.body.data;
    if (!validUrlLib.isUri(url)) {
      res.status(500).send('newURLErrorURL');
      return;
    }
    if (!REQUEST_TYPES[type]) {
      res.status(500).send('newURLErrorType');
      return;
    }
    if (data) {
      try {
        JSON.parse(data);
      } catch (_error) {
        res.status(500).send('newURLErrorData');
        return;
      }
    }
    db = req.db;
    allDurations = db.get('alldurations');
    return allDurations.findOne({
      url: url,
      type: type
    }, function(error, result) {
      var urlEntry;
      if (error) {
        res.status(500).send('newURLErrorSave');
        return;
      }
      if (result) {
        res.status(500).send('newURLErrorDuplicate');
        return;
      }
      urlEntry = {
        url: url,
        type: type,
        data: data,
        durations: []
      };
      return allDurations.insert(urlEntry, function(error, result) {
        if (error) {
          res.status(500).send('newURLErrorSave');
          return;
        }
        return res.sendStatus(200);
      });
    });
  });
  app.get('/run', function(req, res) {
    var timestamp;
    timestamp = "" + (Math.floor(new Date() / 1000));
    runChecks(req.db, timestamp);
    return res.redirect('/');
  });
  app.get('/', function(req, res) {
    var allDurations, db;
    db = req.db;
    allDurations = db.get('alldurations');
    return allDurations.count({}, function(error, totalCount) {
      return db.get('dataByTimestamp').find({}, {
        limit: 1,
        sort: {
          _id: -1
        }
      }, function(error, resultArray) {
        var context, lastRecord, progressPercentage;
        lastRecord = resultArray[0];
        progressPercentage = Math.floor(lastRecord['responseRecords'].length / totalCount * 100);
        context = {
          data: lastRecord,
          progressPercentage: progressPercentage,
          NUM_OF_LAST_RUNS: NUM_OF_LAST_RUNS
        };
        return res.render('latest.ejs', context);
      });
    });
  });
  return app.get('/crud', function(req, res) {
    var context;
    context = {};
    return res.render('crud.ejs', context);
  });
};

runChecks = function(db, timestamp) {
  var allDurations, byTimestamp, timestampRecord;
  byTimestamp = db.get('dataByTimestamp');
  timestampRecord = {
    timestamp: timestamp,
    responseRecords: []
  };
  byTimestamp.insert(timestampRecord);
  allDurations = db.get('alldurations');
  return allDurations.find({}, {}, function(e, durations) {
    return asyncLib.series(durations.map(function(duration) {
      return function(callbackOuter) {
        var data, options, requestCallerFunction, requestType, url;
        url = duration['url'];
        options = {
          uri: url,
          time: true,
          timeout: TIMEOUT
        };
        requestType = duration['type'];
        if (requestType === 'GET') {
          requestCallerFunction = function(requestCallerCallback) {
            return requestLib(options, requestCallerCallback);
          };
        } else if (requestType === 'POST') {
          data = duration['data'];
          requestCallerFunction = function(requestCallerCallback) {
            return requestLib.post(options, data, requestCallerCallback);
          };
        }
        return executeRequests(requestCallerFunction, db, url, requestType, timestamp, callbackOuter);
      };
    }));
  });
};

executeRequests = function(requestCallerFunction, db, url, requestType, timestamp, callbackOuter) {
  var i, responseRecords, results1;
  responseRecords = [];
  return asyncLib.series((function() {
    results1 = [];
    for (var i = 1; 1 <= NUM_OF_REQUESTS ? i <= NUM_OF_REQUESTS : i >= NUM_OF_REQUESTS; 1 <= NUM_OF_REQUESTS ? i++ : i--){ results1.push(i); }
    return results1;
  }).apply(this).map(function(_) {
    return function(callbackInner) {
      return requestCallerFunction(function(error, response, body) {
        var responseRecord;
        if (error) {
          responseRecord = {
            url: url,
            type: requestType,
            time: null,
            statusCode: null,
            size: null
          };
        } else {
          responseRecord = {
            url: url,
            type: requestType,
            time: response.elapsedTime,
            statusCode: response.statusCode,
            size: body.length
          };
        }
        responseRecords.push(responseRecord);
        if (responseRecords.length === NUM_OF_REQUESTS) {
          addDuration(db, url, requestType, responseRecords, timestamp);
          responseRecords = [];
        }
        return callbackInner(null);
      });
    };
  }), function(err, results) {
    return callbackOuter(null);
  });
};

addDuration = function(db, url, requestType, responseRecords, timestamp) {
  var allDurations, byTimestamp, currentDuration, responseRecord;
  responseRecord = findMedianRecord(responseRecords);
  currentDuration = responseRecord['time'];
  console.log(url);
  console.log(responseRecords);
  console.log(responseRecord);
  allDurations = db.get('alldurations');
  allDurations.findOne({
    url: url,
    type: requestType
  }, function(error, durationsObject) {
    var durationObject, i, lastDurations, len, newDuration, previousSizeAverage, previousTimeAverage, recordCount, sumDurations, sumSizes, variance;
    if (error) {
      console.log('ERROR: the database could be updated');
      return;
    }
    previousTimeAverage = durationsObject['lastDurationsAverage'];
    previousSizeAverage = durationsObject['lastSizesAverage'];
    variance = (currentDuration / durationsObject['lastDurationsAverage']).toFixed(2);
    responseRecord['previousTimeAverage'] = previousTimeAverage;
    responseRecord['previousSizeAverage'] = previousSizeAverage;
    responseRecord['variance'] = variance;
    if (previousTimeAverage * ALERT_MULTIPLE < currentDuration) {
      console.log("ALERT FIRED: " + url + " request duration of " + currentDuration + " exceeded the last " + NUM_OF_LAST_RUNS + "-check average of " + average + " more than " + ALERT_MULTIPLE + " times");
    }
    newDuration = {};
    newDuration[timestamp] = responseRecord;
    durationsObject['durations'].push(newDuration);
    durationsObject['lastDurations'] = durationsObject['durations'].slice(-NUM_OF_LAST_RUNS);
    lastDurations = durationsObject['lastDurations'];
    sumDurations = 0;
    sumSizes = 0;
    recordCount = 0;
    for (i = 0, len = lastDurations.length; i < len; i++) {
      durationObject = lastDurations[i];
      for (timestamp in durationObject) {
        responseRecord = durationObject[timestamp];
        if (responseRecord['time'] && responseRecord['size']) {
          sumDurations += responseRecord['time'];
          sumSizes += responseRecord['size'];
          recordCount++;
        }
      }
    }
    durationsObject['lastDurationsAverage'] = Math.floor(sumDurations / recordCount);
    durationsObject['lastSizesAverage'] = Math.floor(sumSizes / recordCount);
    return allDurations.update({
      _id: durationsObject['_id']
    }, durationsObject);
  });
  byTimestamp = db.get('dataByTimestamp');
  return byTimestamp.findOne({
    timestamp: timestamp
  }, function(error, timestampRecord) {
    if (error) {
      console.log('ERROR: the database could be updated');
      return;
    }
    timestampRecord['responseRecords'].push(responseRecord);
    return byTimestamp.update({
      _id: timestampRecord['_id']
    }, timestampRecord);
  });
};

findMedianRecord = function(responseRecords) {
  var middle;
  responseRecords.sort(function(a, b) {
    return a.time - b.time;
  });
  middle = Math.floor(responseRecords.length / 2);
  return responseRecords[middle];
};
